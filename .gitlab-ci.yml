stages:
  - test
  - build
  - deploy

variables:
  CI_REGISTRY: "registry.gitlab.com"
  CI_REGISTRY_IMAGE: user_service
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

test:
  stage: test
  image: gradle:8.4-jdk21
  services:
    - docker:24.0-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""   # отключаем TLS
  script:
    - gradle --no-daemon test
  cache:
    paths:
      - .gradle
  artifacts:
    reports:
      junit: build/test-results/test/**/*.xml

build:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker tag $CI_REGISTRY_IMAGE:$IMAGE_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo $IMAGE_TAG > user_service.tag
  artifacts:
    paths:
      - user_service.tag
  only:
    - master
trigger_deploy:
  stage: deploy
  script:
    - 'curl --request POST --form token=$DEPLOY_REPO_TRIGGER_TOKEN --form  ref=main --form "variables[USER_SERVICE_APP_TAG]=$CI_COMMIT_SHORT_SHA" https://gitlab.com/api/v4/projects/68997048/trigger/pipeline'
  only:
    - master


#
#deploy_docker_stage:
#  environment:
#    name: stage
#    url: https://someurl
#  image: docker:19.03.1
#  services:
#    - docker:19.03.1-dind
#  stage: deploy
#  variables:
#    DOCKER_HOST: "tcp://${DOCKER_HOST}"
#  before_script:
#    - apk add jq
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  script:
#  - export CONFIG=$(echo $CONFIG1_STAGE | jq -c) && docker stack deploy --with-registry-auth -c ./docker/stage/app.yml app